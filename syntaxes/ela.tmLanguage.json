{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "easylang",
  "patterns": [
    {
      "include": "#all"
    }
  ],
  "repository": {
    "all": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#const"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#params"
        },
        {
          "include": "#ident"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.ela",
          "match": "\\b(if|else|for|in|while|return|break|continue|block|import|using|pub)\\b"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.ela",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.ela",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.binary.ela",
          "match": "\\b0(?:b|B)[01]+(?:_?[01]+)*\\.?[01]*(?:_?[01]+)*\\b"
        },
        {
          "name": "constant.numeric.octal.ela",
          "match": "\\b0(?:o|O)[0-7]+(?:_?[0-7]+)*\\.?[0-7]*(?:_?[0-7]+)*\\b"
        },
        {
          "name": "constant.numeric.digit.ela",
          "match": "\\b[0-9]+(?:_?[0-9]+)*\\.?[0-9]*(?:_?[0-9]+)*\\b"
        },
        {
          "name": "constant.numeric.hex.ela",
          "match": "\\b0(?:x|X)[0-9a-fA-F]+(?:_?[0-9a-fA-F]+)*\\.?[0-9a-fA-F]*(?:_?[0-9a-fA-F]+)*\\b"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.ela",
          "match": "==|!=|<=|>=|and|or|<|>"
        },
        {
          "name": "keyword.operator.assignment.ela",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.ela",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.logical.ela",
          "match": "-|not"
        }
      ]
    },
    "comment": {
      "name": "comment.line.number-sign.ela",
      "begin": "#",
      "end": "\n"
    },
    "ident": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_](?:[a-zA-Z_]|[0-9])*)\\b\\((.*)?\\)",
          "captures": {
            "1": {
              "name": "entity.name.function.support"
            },
            "2": {
              "patterns": [
                {
                  "include": "#punctuation-comma"
                },
                {
                  "include": "#number"
                },
                {
                  "include": "#string"
                },
                {
                  "include": "#const"
                },
                {
                  "include": "#params"
                },
                {
                  "include": "#ident"
                }
              ]
            }
          }
        },
        {
          "name": "variable.other.ela",
          "match": "\\b[a-zA-Z_](?:[a-zA-Z_]|[0-9])*\\b"
        }
      ]
    },
    "const": {
      "patterns": [
        {
          "name": "constant.language.boolean.ela",
          "match": "\\b(true)\\b"
        },
        {
          "name": "constant.language.boolean.ela",
          "match": "\\b(false)\\b"
        },
        {
          "name": "constant.language.null.ela",
          "match": "\\b(none)\\b"
        },
        {
          "name": "constant.language.ela",
          "match": "\\b(inf)\\b"
        }
      ]
    },
    "params": {
      "match": "(\\|)([^\\|]*)?(\\|)\\s*=>\\s*(.*)?",
      "captures": {
        "1": { "name": "keyword.other.begin.straight.ela" },
        "2": {
          "patterns": [
            {
              "include": "#punctuation-comma"
            },
            {
              "name": "variable.parameter.ela",
              "match": "[a-zA-Z_](?:[a-zA-Z_]|[0-9])*"
            }
          ]
        },
        "3": { "name": "keyword.other.end.straight.ela" },
        "4": { "patterns": [{ "include": "#all" }] }
      }
    },
    "punctuation-comma": {
      "name": "punctuation.other.comma.ela",
      "match": ","
    }
  },
  "scopeName": "source.ela"
}
